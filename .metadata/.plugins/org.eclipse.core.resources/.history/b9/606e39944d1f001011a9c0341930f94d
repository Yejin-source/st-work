package com.example.jpaboard.controller;

import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
// import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.example.jpaboard.dto.ArticleForm;
import com.example.jpaboard.entity.Article;
import com.example.jpaboard.repository.ArticleRepository;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
public class ArticleController {
	
	@Autowired // 의존성주입
	private ArticleRepository articleRepository;
	
	@GetMapping("/articles/new") // doGet() // 요청하면 포워딩이 됨
	public String newArticleForm() {
		return "articles/new"; // forward 포워딩
	}
	
	/*
		@PostMapping("/articles/create")
		public String createArticle(@RequestParam(value = "currentPage", defaultValue="1") int currentPage
										// 문자열로 받더라도 Integer를 알아서 해 줌
										, @RequestParam(value = "title") String title
										, @RequestParam(value = "content") String content) {
			// 서블릿 -> String title = request.getParameter("title")
			
		ㄱ	System.out.println("currentPage: " + currentPage);
			System.out.println("title: " + title);
			System.out.println("content: " + content);
			return "";
		}
	*/
	
	@PostMapping("/articles/create") // doPost()
	public String createArticle(ArticleForm form) { // @RequestParam, DTO(커맨드객체)
		System.out.println(form.toString());
		
		// DTO -> Entity
		Article entity = form.toEntity();
		/*
			Article entity = new Article();
			entity.setTitle(form.getTitle());
			entity.setContent(form.getContent());
		*/
		
		articleRepository.save(entity); // 레포지토리 호출할 때는 Entity가 필요 | entity 타입이 되어야 들어올 수 있음
		return "redirect:/articles/index"; // GET 호출 /articles/index 
		
		// return "redirect:/"; 
		// "/home"으로 리다이렉트
		// return "redirect:/home"; 
		// return "home"; (X) -> 포워딩
		
		// article/list로 리다이렉트 -> return "redirect:/article/list";
	}
	
	@GetMapping("/articles/index") // 가장 중요함!
	public String articleList(Model model
							, @RequestParam(value = "currentPage", defaultValue = "0") int currentPage // 이름이 같으면 value 생략가능
							, @RequestParam(value = "rowPerPage", defaultValue = "10") int rowPerPage // 값을 못 받은 경우 default
							, @RequestParam(value = "word", defaultValue = "") String word) {
			
		Sort sort = Sort.by("id").descending();
		
		PageRequest pageable = PageRequest.of(currentPage, rowPerPage, sort);
		Page<Article> list = articleRepository.findByTitleContaining(pageable, word);
		

		// Page의 추가 속성
		log.debug("list.getTotalElements(): "+ list.getTotalElements()); // list.size() X -> 전체 행의 사이즈가 나옴
		log.debug("list.getTotalPages(): "+ list.getTotalPages()); // 전체 페이지 사이즈
		log.debug("list.getNumber(): "+ list.getNumber()); // 현재 페이지
		log.debug("list.getSize(): "+ list.getSize()); // rowPerPage
		log.debug("list.isFirst(): "+ list.isFirst()); // 1 페이지인지 : 이전 링크 유무
		log.debug("list.hasNext(): "+ list.hasNext()); // 다음이 있는지 : 다음 링크 유무
		
		
		model.addAttribute("list", list);
		model.addAttribute("prePage", list.getNumber()-1);
		model.addAttribute("nextPage", list.getNumber()+1);
		model.addAttribute("word", word);
		// + RedirectAttributes.addribute() 같이 포함
		return "articles/index"; // 포워딩
	}
	
	
	@GetMapping("/articles/show")
	public String show(Model model, @RequestParam Long id) {
		Article article = articleRepository.findById(id).orElse(null); // null을 허용할 수 있게 바꿈
		model.addAttribute("article", article);
		return "articles/show";
	}
	
	
	@GetMapping("/articles/edit")
	public String edit(Model model, @RequestParam Long id) {
		Article article = articleRepository.findById(id).orElse(null); // null을 허용할 수 있게 바꿈
		model.addAttribute("article", article);
		return "articles/edit";
	}
	
	
	@PostMapping("/articles/update")
	public String update(ArticleForm articleForm) {
		Article article = articleForm.toEntity(); 
		// entity가 키값을 가지고 있으면 새로운 행을 추가(insert)하는 것이 아니라 
		// 존재하던 키값의 행을 수정(update)하게 됨
		articleRepository.save(article); // update
		return "redirect:/articles/show?id="+article.getId();
	}
	
	
	@GetMapping("/articles/delete")
	public String delete(@RequestParam long id, RedirectAttributes rda) {
		Article article = articleRepository.findById(id).orElse(null);
		
		if(article == null) {
			rda.addFlashAttribute("msg", "삭제 실패"); // redirect의 뷰의 모델에서 자동으로 출력 가능
			return "redirect:/articles/show?id="+id;
		}
		articleRepository.delete(article);
		rda.addFlashAttribute("msg", "삭제 성공"); redirect의 뷰의 모델에서 자동으로 출력 가능
		return "redirect:/articles/index"; // 	
	}
	
	
	@GetMapping("/articles/sqlTest")
	public String sqlTest(Model model) {
		Map<String, Object> map = articleRepository.getMinMaxCount("a%");
		log.debug(map.toString());
		model.addAttribute("map", map);
		return "articles/sqlTest";
	}
}
